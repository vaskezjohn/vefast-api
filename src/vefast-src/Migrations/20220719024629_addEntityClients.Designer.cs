// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vefast_src.Infrastructure;

namespace vefast_src.Migrations
{
    [DbContext(typeof(VefastDataContext))]
    [Migration("20220719024629_addEntityClients")]
    partial class addEntityClients
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.AttributeValues.AttributeValues", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Attribute")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Attribute");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Attributes.Attributes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.BookkeepingEntries.BookkeepingEntries", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("BookkeepingEntries");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Brands.Brands", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Categories.Categories", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ID_ParentCategory")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ID_ParentCategory");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Companies.Companies", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ServiceChargeValue")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VatChargeValue")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Countries.Countries", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.IVACategories.IVACategories", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("IVACategories");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.OrderItems.OrderItems", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<Guid>("ID_Order")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Product")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Order");

                    b.HasIndex("ID_Product");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Orders.Orders", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillNo")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTimeIn")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<double>("GrossAmount")
                        .HasColumnType("double");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("NetAmount")
                        .HasColumnType("double");

                    b.Property<int>("PaidStatus")
                        .HasColumnType("int");

                    b.Property<double>("ServiceCharge")
                        .HasColumnType("double");

                    b.Property<double>("ServiceChargeRate")
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("VatCharge")
                        .HasColumnType("double");

                    b.Property<double>("VatChargeRate")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.PriceTypes.PriceTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("PriceTypes");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Prices.Prices", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_PriceType")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Product")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Utility")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("ID_PriceType");

                    b.HasIndex("ID_Product");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.ProductTypes.ProductTypes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Products.Products", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CodVFS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("CostFOB")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("ID_Brand")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Category")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Store")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ProductTypesID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityFailed")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPackage")
                        .HasColumnType("int");

                    b.Property<int>("ReorderPoint")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitMeasurement")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Brand");

                    b.HasIndex("ID_Category");

                    b.HasIndex("ID_Store");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("ProductTypesID");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.ProductsAttributeValues.ProductsAttributeValues", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AttributeValueID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_AttributeValue")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_ProductType")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ProductTypeID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("AttributeValueID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("ProductTypeID");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("ProductsAttributeValues");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Providers.Providers", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CUIT")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodVFS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ID_Country")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_IVACategory")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_ImputationCredit")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_ImputationDebit")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Province")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(10000)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Referrer")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Country");

                    b.HasIndex("ID_IVACategory");

                    b.HasIndex("ID_ImputationCredit");

                    b.HasIndex("ID_ImputationDebit");

                    b.HasIndex("ID_Province");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Provinces.Provinces", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.StockDeposits.StockDeposits", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Product")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Store")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Product");

                    b.HasIndex("ID_Store");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("StockDeposits");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Stores.Stores", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("CompanyID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ID_Company")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InsertUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("InsertUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Users.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("ID_InsertUser")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ID_InsertUser");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.AttributeValues.AttributeValues", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Attributes.Attributes", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ID_Attribute")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Attributes.Attributes", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.BookkeepingEntries.BookkeepingEntries", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Brands.Brands", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Categories.Categories", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Categories.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("ID_ParentCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Companies.Companies", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Countries.Countries", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.IVACategories.IVACategories", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.OrderItems.OrderItems", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Orders.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("ID_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Products.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Orders.Orders", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.PriceTypes.PriceTypes", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Prices.Prices", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.PriceTypes.PriceTypes", "PriceType")
                        .WithMany()
                        .HasForeignKey("ID_PriceType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Products.Products", "Product")
                        .WithMany("Price")
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("PriceType");

                    b.Navigation("Product");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.ProductTypes.ProductTypes", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Products.Products", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Brands.Brands", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("ID_Brand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Categories.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ID_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Stores.Stores", "Store")
                        .WithMany()
                        .HasForeignKey("ID_Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.ProductTypes.ProductTypes", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductTypesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("InsertUser");

                    b.Navigation("Store");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.ProductsAttributeValues.ProductsAttributeValues", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.AttributeValues.AttributeValues", "AttributeValue")
                        .WithMany()
                        .HasForeignKey("AttributeValueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.ProductTypes.ProductTypes", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AttributeValue");

                    b.Navigation("InsertUser");

                    b.Navigation("ProductType");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Providers.Providers", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Countries.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("ID_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.IVACategories.IVACategories", "IVACategory")
                        .WithMany()
                        .HasForeignKey("ID_IVACategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.BookkeepingEntries.BookkeepingEntries", "BookkeepingEntryCredit")
                        .WithMany()
                        .HasForeignKey("ID_ImputationCredit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.BookkeepingEntries.BookkeepingEntries", "BookkeepingEntryDebit")
                        .WithMany()
                        .HasForeignKey("ID_ImputationDebit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Provinces.Provinces", "Province")
                        .WithMany()
                        .HasForeignKey("ID_Province")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BookkeepingEntryCredit");

                    b.Navigation("BookkeepingEntryDebit");

                    b.Navigation("Country");

                    b.Navigation("InsertUser");

                    b.Navigation("IVACategory");

                    b.Navigation("Province");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Provinces.Provinces", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.StockDeposits.StockDeposits", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Products.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Stores.Stores", "Store")
                        .WithMany()
                        .HasForeignKey("ID_Store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InsertUser");

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Stores.Stores", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Companies.Companies", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("InsertUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Users.Users", b =>
                {
                    b.HasOne("vefast_src.Domain.Entities.Users.Users", "User")
                        .WithMany()
                        .HasForeignKey("ID_InsertUser")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Attributes.Attributes", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Brands.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Categories.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Orders.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.ProductTypes.ProductTypes", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("vefast_src.Domain.Entities.Products.Products", b =>
                {
                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
